// basic_string implementation from https://github.com/bryangoodrich/cpp_String
// with some edits.
#ifndef LIBCXX_INCLUDE_STRING_
#define LIBCXX_INCLUDE_STRING_

#include <__out_of_range.h>
#include <assert.h>
#include <string.h>

#include <algorithm>
#include <iterator>

namespace std {

/*! @class basic_string <iostream>
 *  @brief A custom basic_string implementation
 *
 *  A custom C++ implementation of a basic_string object for pedagogical
 * purposes. Is efficient for specifying the length_ of your basic_string and
 * does not depend on the use of a NULL termination.
 *
 *  @author Bryan Goodrich
 *  @version 0.2
 *  @date 2013-12-13
 *  @invariant basic_string data_ will always point to NULL or a valid address.
 *  @invariant basic_string length_ will always indicate amount of allocated
 * space.
 */
template <typename _CharT>
class basic_string {
  using value_type = _CharT;
  using size_type = size_t;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;

  pointer data_;     /*!< The ASCII characters that comprise the basic_string */
  size_type length_; /*!< The number of characters allocated in data_ */

 public:
  static constexpr size_type npos = static_cast<size_type>(-1);

  basic_string() {
    length_ = 0;
    data_ = new value_type[1];
    data_[0] = 0;
  }

  basic_string(value_type c) {
    length_ = 1;
    data_ = new value_type[2];
    data_[0] = c;
    data_[1] = 0;
  }

  // Constructs the string with the contents initialized with a copy of the
  // null-terminated character string pointed to by s. The length of the string
  // is determined by the first null character. The behavior is undefined if [s,
  // s + Traits::length(s)) is not a valid range (for example, if s is a null
  // pointer).
  basic_string(const_pointer str) {
    size_type len = 0;
    while (str[len]) ++len;
    length_ = len;
    data_ = new value_type[len + 1];
    assert(data_);
    for (size_type j = 0; j < len; j++) data_[j] = str[j];
    data_[len] = 0;
  }

  /*!
   *  @brief Copy basic_string Constructor
   *  @param[in] s A basic_string instance.
   *  @post This basic_string will be identical to basic_string @a s.
   */
  basic_string(const basic_string<value_type>& s) {
    length_ = s.length();
    data_ = new value_type[length_ + 1];
    for (unsigned j = 0; j < length_; j++) data_[j] = s[j];
    data_[length_] = 0;
  }

  basic_string(const value_type *other, size_type count) {
    length_ = count;
    data_ = new value_type[length_ + 1];
    memcpy(data_, other, length_);
    data_[length_] = 0;
  }

  basic_string(const basic_string& other, size_type pos) : basic_string(other, pos, npos) {}

  basic_string(const basic_string& other, size_type pos, size_type count) {
    if (pos > other.size()) __throw_out_of_range();
    length_ = std::min(other.size() - pos, count);
    data_ = new value_type[length_ + 1];
    for (size_type i = 0; i < length_; ++i) data_[i] = other[pos + i];
    data_[length_] = 0;
  }

  /*!
   *  @brief Default basic_string Destructor
   *  @post basic_string data_ is deleted.
   */
  ~basic_string() { delete[] data_; }

  /*!
   *  @brief basic_string length_.
   *  @return Value in basic_string @c length_.
   */
  size_type length() const { return length_; }

  size_type size() const { return length_; }

  bool empty() const { return length_ == 0; }

  using iterator = ::std::iterator<pointer>;
  using const_iterator = ::std::iterator<const_pointer>;

  iterator begin() { return iterator(data_); }

  iterator end() { return iterator(data_ + length_); }

  const_iterator cbegin() const { return const_iterator(data_); }

  const_iterator cend() const { return const_iterator(data_ + length_); }

  const_iterator begin() const { return const_iterator(data_); }

  const_iterator end() const { return const_iterator(data_ + length_); }

  constexpr basic_string& erase(size_type index = 0, size_type count = npos) {
    if (index > size()) __throw_out_of_range();
    erase(const_iterator(data_ + index),
          const_iterator(data_ + index + std::min(count, size() - index)));
    return *this;
  }

  constexpr iterator erase(const_iterator pos) { return erase(pos, pos + 1); }

  constexpr iterator erase(const_iterator first, const_iterator last) {
    assert(begin() <= first && first < end());
    assert(begin() < last);
    assert(first < last);

    if (last > end()) last = end();

    size_t first_offset = static_cast<size_t>(first - begin());
    size_t last_offset = static_cast<size_t>(last - begin());
    size_t remaining = static_cast<size_t>(end() - last);

    memmove(reinterpret_cast<void*>(data_ + first_offset),
            reinterpret_cast<void*>(data_ + last_offset),
            remaining * sizeof(value_type));
    *reinterpret_cast<pointer>(data_ + first_offset +
                               remaining * sizeof(value_type)) = 0;
    length_ -= static_cast<size_t>(last - first);

    // Returns an iterator pointing to the character last pointed to before
    // the erase, or end() if no such character exists.
    return iterator(data_ + first_offset + 1);
  }

  // Finds the first charavter `c`.
  size_type find(value_type c, size_type pos = 0) const {
    for (auto it = begin() + static_cast<typename iterator::difference_type>(pos);
         it != end(); ++it) {
      if (*it == c) return static_cast<size_type>(it - begin());
    }
    return npos;
  }

  constexpr basic_string substr(size_type pos = 0,
                                size_type count = npos) const {
    return basic_string(*this, pos, count);
  }

  constexpr bool starts_with(const basic_string &other) const {
    if (other.size() > size()) return false;
    return strncmp(other.c_str(), c_str(), other.size()) == 0;
  }

  //@{
  /*!

   *  @brief Access basic_string character.
   *  @param j Index value in basic_string.
   *  @pre @a j is less than basic_string length_.
   *  @return character at @a j index of basic_string data_.
   *  @throw out_of_range

   */
  reference operator[](size_type j);
  const_reference operator[](size_type j) const;
  //@}

  const value_type* c_str() const { return data_; }

  /*!
   *  @brief Sets basic_string value.
   *  @param[in] s A basic_string object.
   *  @return A basic_string reference to *this.
   *  @post basic_string will be equivalent to @a s.
   */
  basic_string& operator=(const basic_string& s);

  /*!
   *  @brief Append to basic_string.
   *  @param[in] s A basic_string object.
   *  @return A basic_string reference to *this.
   *  @post basic_string will equal the concatenation of itself with @a s.
   */
  basic_string& operator+=(const basic_string& s);

  //@{
  /*!
   *  @brief basic_string concatenation (addition).
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return Copy of a basic_string object.
   *  @post The basic_string will be the concatenation of @a lhs and @a rhs.
   */
  friend basic_string operator+(const basic_string& lhs, value_type rhs);
  friend basic_string operator+(value_type lhs, const basic_string& rhs);
  friend basic_string operator+(const_pointer lhs, const basic_string& rhs);
  //@}

  basic_string operator+(const basic_string& other) const {
    basic_string s(*this);
    s += other;
    return s;
  }

  basic_string operator+(const_pointer rhs) const {
    basic_string s(*this);
    s += rhs;
    return s;
  }

  //@{
  /*!
   *  @brief basic_string equality
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return True, if @a lhs and @a rhs have the same length_, and each
   *          character in their basic_string data_ are identical in both value
   *          and index.
   */
  friend bool operator==(const basic_string& lhs, value_type rhs);
  friend bool operator==(const basic_string& lhs, const_pointer rhs);
  friend bool operator==(value_type lhs, const basic_string& rhs);
  friend bool operator==(const_pointer lhs, const basic_string& rhs);
  //@}

  bool operator==(basic_string const& rhs) const {
    if (length() != rhs.length()) return false;

    const auto& this_str = *this;
    size_type cap = length();
    size_type n = 0;
    while ((n < cap) && (this_str[n] == rhs[n])) n++;
    return (n == cap);
  }

  //@{
  /*!
   *  @brief basic_string inequality: Greater-than.
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return True, if @a lhs is in dictionary order (Capitals-first) to
   *          @a rhs when comparing alphabetical characters or @a lhs is
   *          greater in ASCII value to @a rhs, in corresponding basic_string
   *          data_ indices.
   */
  friend bool operator>(const basic_string& lhs, const basic_string& rhs);
  friend bool operator>(const basic_string& lhs, char rhs);
  friend bool operator>(const basic_string& lhs, const char* rhs);
  friend bool operator>(char lhs, const basic_string& rhs);
  friend bool operator>(const char* lhs, const basic_string& rhs);
  //@}

  //@{
  /*!

   *  @brief basic_string non-equality
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   convertable.
   *  @return True, if @a lhs is not equal to @a rhs.
   *  @see basic_string::operator==

   */
  friend bool operator!=(const basic_string& lhs, const basic_string& rhs);
  friend bool operator!=(const basic_string& lhs, char rhs);
  friend bool operator!=(const basic_string& lhs, const char* rhs);
  friend bool operator!=(char lhs, const basic_string& rhs);
  friend bool operator!=(const char* lhs, const basic_string& rhs);
  //@}

  //@{
  /*!
   *  @brief basic_string inequality: Less-than.
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return True, if @a lhs is neither equal to, nor greater-than @a rhs.
   *  @see basic_string::operator==,basic_string::operator>
   */
  friend bool operator<(const basic_string& lhs, const basic_string& rhs);
  friend bool operator<(const basic_string& lhs, char rhs);
  friend bool operator<(const basic_string& lhs, const char* rhs);
  friend bool operator<(char lhs, const basic_string& rhs);
  friend bool operator<(const char* lhs, const basic_string& rhs);
  //@}

  //@{
  /*!
   *  @brief basic_string inequality: Less-than or equal
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return True, if @a lhs is not greater-than @a rhs.
   *  @see basic_string::operator>
   */
  friend bool operator<=(const basic_string& lhs, const basic_string& rhs);
  friend bool operator<=(const basic_string& lhs, char rhs);
  friend bool operator<=(const basic_string& lhs, const char* rhs);
  friend bool operator<=(char lhs, const basic_string& rhs);
  friend bool operator<=(const char* lhs, const basic_string& rhs);
  //@}

  //@{
  /*!
   *  @brief basic_string inequality: Greater-than or equal
   *  @param[in] lhs The left-hand operand basic_string or basic_string
   * convertable.
   *  @param[in] rhs The right-hand operand basic_string or basic_string
   * convertable.
   *  @return True, if @a lhs is greater-than or equal to @a rhs.
   *  @see basic_string::operator>,basic_string::operator==
   */
  friend bool operator>=(const basic_string& lhs, const basic_string& rhs);
  friend bool operator>=(const basic_string& lhs, char rhs);
  friend bool operator>=(const basic_string& lhs, const char* rhs);
  friend bool operator>=(char lhs, const basic_string& rhs);
  friend bool operator>=(const char* lhs, const basic_string& rhs);
  //@}
};

template <class _CharT>
_CharT& basic_string<_CharT>::operator[](size_type j) {
  if (j >= length_) __throw_out_of_range();
  return data_[j];
}

template <typename T>
const T& basic_string<T>::operator[](size_type j) const {
  if (j >= length_) __throw_out_of_range();
  return data_[j];
}

template <typename T>
inline basic_string<T>& basic_string<T>::operator=(const basic_string<T>& s) {
  if (this == &s) return *this;

  delete[] data_;
  length_ = s.length();
  data_ = new T[length_];
  for (unsigned j = 0; j < length_; j++) data_[j] = s[j];
  return *this;
}

template <typename T>
inline basic_string<T>& basic_string<T>::operator+=(const basic_string<T>& s) {
  size_type length = length_ + s.length();
  pointer str = new T[length + 1];

  for (size_type j = 0; j < length_; j++) str[j] = data_[j];

  for (unsigned i = 0; i < s.length(); i++) str[length_ + i] = s[i];

  str[length] = 0;

  delete[] data_;
  length_ = length;
  data_ = str;
  return *this;
}

template <typename T>
inline basic_string<T> operator+(const basic_string<T>& lhs, T rhs) {
  return basic_string<T>(lhs) += basic_string<T>(rhs);
}

template <typename T>
inline basic_string<T> operator+(T lhs, const basic_string<T>& rhs) {
  return basic_string<T>(lhs) += rhs;
}

template <typename T>
inline basic_string<T> operator+(const T* lhs, const basic_string<T>& rhs) {
  return basic_string<T>(lhs) += rhs;
}

inline basic_string<char> operator+(const char* lhs, const basic_string<char>& rhs) {
  return basic_string<char>(lhs) += rhs;
}

template <typename T>
inline bool operator==(const basic_string<T>& lhs, char rhs) {
  return (lhs == basic_string(rhs));
}

template <typename T>
inline bool operator==(const basic_string<T>& lhs, const char* rhs) {
  return (lhs == basic_string(rhs));
}

template <typename T>
inline bool operator==(char lhs, const basic_string<T>& rhs) {
  return (basic_string(lhs) == rhs);
}

template <typename T>
inline bool operator==(const char* lhs, const basic_string<T>& rhs) {
  return (basic_string(lhs) == rhs);
}

template <typename T>
inline bool operator>(const basic_string<T>& lhs, const basic_string<T>& rhs) {
  unsigned cap = (lhs.length() < rhs.length()) ? lhs.length() : rhs.length();
  unsigned n = 0;
  while ((n < cap) && (lhs[n] == rhs[n])) n++;
  if (n == cap) return (lhs.length() > rhs.length());

  if ((('A' <= lhs[n] && lhs[n] <= 'Z') || ('a' <= lhs[n] && lhs[n] <= 'z')) &&
      (('A' <= rhs[n] && rhs[n] <= 'Z') || ('a' <= rhs[n] && rhs[n] <= 'z'))) {
    char A = (lhs[n] & ~32);
    char B = (rhs[n] & ~32);
    if (A != B) return (A > B);
  }
  return lhs[n] > rhs[n];
}

template <typename T>
inline bool operator>(const basic_string<T>& lhs, char rhs) {
  return (lhs > basic_string(rhs));
}

template <typename T>
inline bool operator>(const basic_string<T>& lhs, const char* rhs) {
  return (lhs > basic_string(rhs));
}

template <typename T>
inline bool operator>(char lhs, const basic_string<T>& rhs) {
  return (basic_string(lhs) > rhs);
}

template <typename T>
inline bool operator>(const char* lhs, const basic_string<T>& rhs) {
  return (basic_string(lhs) > rhs);
}

template <typename T>
inline bool operator!=(const basic_string<T>& lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs);
}

template <typename T>
inline bool operator!=(const basic_string<T>& lhs, char rhs) {
  return !(lhs == rhs);
}

template <typename T>
inline bool operator!=(const basic_string<T>& lhs, const char* rhs) {
  return !(lhs == rhs);
}

template <typename T>
inline bool operator!=(char lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs);
}

template <typename T>
inline bool operator!=(const char* lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs);
}

template <typename T>
inline bool operator<(const basic_string<T>& lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs) && !(lhs > rhs);
}

template <typename T>
inline bool operator<(const basic_string<T>& lhs, char rhs) {
  return !(lhs == rhs) && !(lhs > rhs);
}

template <typename T>
inline bool operator<(const basic_string<T>& lhs, const char* rhs) {
  return !(lhs == rhs) && !(lhs > rhs);
}

template <typename T>
inline bool operator<(char lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs) && !(lhs > rhs);
}

template <typename T>
inline bool operator<(const char* lhs, const basic_string<T>& rhs) {
  return !(lhs == rhs) && !(lhs > rhs);
}

template <typename T>
inline bool operator<=(const basic_string<T>& lhs, const basic_string<T>& rhs) {
  return !(lhs > rhs);
}

template <typename T>
inline bool operator<=(const basic_string<T>& lhs, char rhs) {
  return !(lhs > rhs);
}

template <typename T>
inline bool operator<=(const basic_string<T>& lhs, const char* rhs) {
  return !(lhs > rhs);
}

template <typename T>
inline bool operator<=(char lhs, const basic_string<T>& rhs) {
  return !(lhs > rhs);
}

template <typename T>
inline bool operator<=(const T* lhs, const basic_string<T>& rhs) {
  return !(lhs > rhs);
}

template <typename T>
inline bool operator>=(const basic_string<T>& lhs, const basic_string<T>& rhs) {
  return (lhs == rhs) || (lhs > rhs);
}

template <typename T>
inline bool operator>=(const basic_string<T>& lhs, char rhs) {
  return (lhs == rhs) || (lhs > rhs);
}

template <typename T>
inline bool operator>=(const basic_string<T>& lhs, const char* rhs) {
  return (lhs == rhs) || (lhs > rhs);
}

template <typename T>
inline bool operator>=(char lhs, const basic_string<T>& rhs) {
  return (lhs == rhs) || (lhs > rhs);
}

template <typename T>
inline bool operator>=(const char* lhs, const basic_string<T>& rhs) {
  return (lhs == rhs) || (lhs > rhs);
}

//template <typename T>
//inline basic_string<T> operator+(const T *lhs, const basic_string<T> &rhs) {
//  basic_string<T> ret(lhs);
//  return ret + rhs;
//}

using string = basic_string<char>;

}  // namespace std

#endif  // LIBCXX_INCLUDE_STRING_
