#ifndef ALGORITHM_
#define ALGORITHM_

#include <functional>
#include <iterator>
#include <utility>

namespace std {

template <class T>
const T& min(const T& a, const T& b) {
  return (b < a) ? b : a;
}

template <class T>
const T& max(const T& a, const T& b) {
  return (b > a) ? b : a;
}

template <class ForwardIt, class Compare>
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last, Compare comp) {
  if (first != last) {
    ForwardIt next = first;
    while (++next != last) {
      if (comp(*next, *first)) return next;
      first = next;
    }
  }
  return last;
}

template <class ForwardIt>
ForwardIt is_sorted_until(ForwardIt first, ForwardIt last) {
  return is_sorted_until(first, last, std::less<>());
}

template <class ForwardIt, class T, class Compare>
ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value,
                      Compare comp) {
  ForwardIt it;
  typename std::iterator_traits<ForwardIt>::difference_type count, step;
  count = std::distance(first, last);

  while (count > 0) {
    it = first;
    step = count / 2;
    std::advance(it, step);
    if (!comp(value, *it)) {
      first = ++it;
      count -= step + 1;
    } else
      count = step;
  }
  return first;
}

template <class ForwardIt, class T>
ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value) {
  ForwardIt it;
  typename std::iterator_traits<ForwardIt>::difference_type count, step;
  count = std::distance(first, last);

  while (count > 0) {
    it = first;
    step = count / 2;
    std::advance(it, step);
    if (!(value < *it)) {
      first = ++it;
      count -= step + 1;
    } else
      count = step;
  }
  return first;
}

template <typename T>
void swap(T& t1, T& t2) {
  T temp = std::move(t1);  // or T temp(std::move(t1));
  t1 = std::move(t2);
  t2 = std::move(temp);
}

template <class ForwardIt1, class ForwardIt2>
constexpr void iter_swap(ForwardIt1 a, ForwardIt2 b)  // constexpr since C++20
{
  using std::swap;
  swap(*a, *b);
}

template <class BidirIt>
constexpr  // since C++20
    void
    reverse(BidirIt first, BidirIt last) {
  using iter_cat = typename std::iterator_traits<BidirIt>::iterator_category;

  // Tag dispatch, e.g. calling reverse_impl(first, last, iter_cat()),
  // can be used in C++14 and earlier modes.
  if constexpr (std::is_base_of_v<std::random_access_iterator_tag, iter_cat>) {
    if (first == last) return;
    for (--last; first < last; (void)++first, --last) {
      std::iter_swap(first, last);
    }
  } else {
    while ((first != last) && (first != --last)) {
      std::iter_swap(first++, last);
    }
  }
}

template <class BidirIt>
bool next_permutation(BidirIt first, BidirIt last) {
  auto r_first = std::make_reverse_iterator(last);
  auto r_last = std::make_reverse_iterator(first);
  auto left = std::is_sorted_until(r_first, r_last);
  if (left != r_last) {
    auto right = std::upper_bound(r_first, left, *left);
    std::iter_swap(left, right);
  }
  std::reverse(left.base(), last);
  return left != r_last;
}

template <class InputIt, class UnaryPredicate>
constexpr InputIt find_if(InputIt first, InputIt last, UnaryPredicate p) {
  for (; first != last; ++first) {
    if (p(*first)) { return first; }
  }
  return last;
}

template <class InputIt, class UnaryPredicate>
constexpr bool any_of(InputIt first, InputIt last, UnaryPredicate p) {
  return std::find_if(first, last, p) != last;
}

template <class InputIt, class UnaryPredicate>
constexpr bool none_of(InputIt first, InputIt last, UnaryPredicate p) {
  return std::find_if(first, last, p) == last;
}

}  // namespace std

#endif  // ALGORITHM_
