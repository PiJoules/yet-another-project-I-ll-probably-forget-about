// vector implementation from
// https://github.com/Miguel-Deniz/vector-Implementation with some edits.
#pragma once

#include <__out_of_range.h>

#include <algorithm>
#include <new>
#include <utility>

namespace std {

template <class T>
class vector {
 public:
  using size_type = size_t;

  /* ----- Constructors ----- */

  // Default constructor
  vector();

  explicit vector(size_type s);

  // Copy constructor
  vector(const vector& arg);

  // Copy Assingment
  vector<T>& operator=(const vector<T>& arg);

  // Destructor
  ~vector();

  /*----------------------------*/

  /* -------- ITERATORS --------*/

  class iterator {
   public:
    iterator(T* p) : _curr(p) {}

    iterator& operator++() {
      _curr++;
      return *this;
    }

    iterator& operator--() {
      _curr--;
      return *this;
    }

    int32_t operator-(const iterator &other) const {
      return _curr - other._curr;
    }

    T& operator*() { return *_curr; }

    bool operator==(const iterator& b) const { return _curr == b._curr; }

    bool operator!=(const iterator& b) const { return _curr != b._curr; }

   private:
    T* _curr;
  };

  iterator begin();

  const iterator begin() const;

  iterator end();

  const iterator end() const;

  const iterator cbegin() const;

  const iterator cend() const;

  /*----------------------------*/

  /* -------- CAPACITY -------- */

  bool empty() const;

  // Returns size of allocated storate capacity
  size_t capacity() const;

  // Requests a change in capacity
  // reserve() will never decrase the capacity.
  constexpr void reserve(size_type newmalloc);

  // Changes the vector's size.
  // If the newsize is smaller, the last elements will be lost.
  // Has a default value param for custom values when resizing.
  void resize(size_type newsize, const T& val);

  // Returns the size of the vector (number of elements).
  size_t size() const;

  // Returns the maximum number of elements the vector can hold
  size_t max_size() const;

  // Reduces capcity to fit the size
  void shrink_to_fit();

  /*----------------------------*/

  /* -------- MODIFIERS --------*/

  // Removes all elements from the vector
  // Capacity is not changed.
  void clear() {
    for (size_type i = 0; i < size(); ++i) {
      _elements[i].~T();
    }
  }

  constexpr iterator erase(iterator pos) {
    auto it = begin();
    auto e = end();

    for (; it != e; ++it) {
      if (it == pos) {
        size_t i = static_cast<size_t>(it - begin());
        _elements[i].~T();

        // Shift all the other elements.
        for (size_t j = i + 1; j < _size; ++j, ++i) {
          // TODO: Confirm if this is the right thing to do.
          new (&_elements[i]) T(std::move(_elements[j]));
        }

        --_size;
        return ++it;
      }
    }

    return e;
  }

  // Inserts element at the back
  void push_back(const T& d);
  void push_back(T&& d);

  template <class... Args>
  constexpr T& emplace_back(Args&&... args) {
    ReserveMoreIfNeeded();
    T* ref = new (&_elements[_size]) T(std::forward<Args>(args)...);
    ++_size;
    return *ref;
  }

  // Removes the last element from the vector
  constexpr void pop_back() {
    _elements[_size - 1].~T();
    --_size;
  }

  /*----------------------------*/

  /* ----- ELEMENT ACCESS ----- */

  // Access elements with bounds checking
  T& at(size_type n);

  // Access elements with bounds checking for constant Vectors.
  const T& at(size_type n) const;

  // Access elements, no bounds checking
  T& operator[](size_type i);

  // Access elements, no bounds checking
  const T& operator[](size_type i) const;

  // Returns a reference to the first element
  T& front();

  // Returns a reference to the first element
  const T& front() const;

  // Returns a reference to the last element
  T& back();

  // Returns a reference to the last element
  const T& back() const;

  // Returns a pointer to the array used by vector
  T* data();

  // Returns a pointer to the array used by vector
  const T* data() const;

  /*----------------------------*/

 private:
  void ReserveMoreIfNeeded() {
    if (_space == 0)
      reserve(8);
    else if (_size == _space)
      reserve(2 * _space);
  }

  size_type _size;   // Number of elements in vector
  T* _elements;      // Pointer to first element of vector
  size_type _space;  // Total space used by vector including
                     // elements and free space.
};

// Constructors/Destructor
template <class T>
vector<T>::vector() : _size(0), _elements(nullptr), _space(0) {}

template <class T>
inline vector<T>::vector(size_type s)
    : _size(s),
      _elements(reinterpret_cast<T*>(malloc(sizeof(T) * s))),
      _space(s) {}

template <class T>
inline vector<T>::vector(const vector& arg)
    : _size(arg._size),
      _elements(reinterpret_cast<T*>(malloc(sizeof(T) * arg._size))),
      _space(arg._space) {
  for (int index = 0; index < arg._size; ++index)
    _elements[index] = arg._elements[index];
}

template <class T>
inline vector<T>& vector<T>::operator=(const vector<T>& a) {
  if (this == &a) return *this;  // Self-assingment not work needed

  // Current vector has enough space, so there is no need for new allocation
  if (a._size <= _space) {
    for (int index = 0; index < a._size; ++index) {
      _elements[index] = a._elements[index];
      _size = a._size;
      return *this;
    }
  }

  T* p = reinterpret_cast<T*>(sizeof(T) * a._size);

  for (int index = 0; index < a._size; ++index) p[index] = a._elements[index];

  free(_elements);
  _size = a._size;
  _space = a._size;
  _elements = p;
  return *this;
}

template <class T>
vector<T>::~vector() {
  free(_elements);
}

// Iterators
template <class T>
inline typename vector<T>::iterator vector<T>::begin() {
  return vector<T>::iterator(&_elements[0]);
}

template <class T>
inline const typename vector<T>::iterator vector<T>::begin() const {
  return vector<T>::iterator(&_elements[0]);
}

template <class T>
inline typename vector<T>::iterator vector<T>::end() {
  return vector<T>::iterator(&_elements[_size]);
}

template <class T>
inline const typename vector<T>::iterator vector<T>::end() const {
  return vector<T>::iterator(&_elements[_size]);
}

template <class T>
inline const typename vector<T>::iterator vector<T>::cbegin() const {
  return vector<T>::iterator(&_elements[0]);
}

template <class T>
inline const typename vector<T>::iterator vector<T>::cend() const {
  return vector<T>::iterator(&_elements[_size]);
}

// Capacity
template <class T>
inline bool vector<T>::empty() const {
  return (_size == 0);
}

template <class T>
inline size_t vector<T>::capacity() const {
  return _space;
}

template <class T>
constexpr inline void vector<T>::reserve(size_type newalloc) {
  if (newalloc <= _space) return;

  T* p = reinterpret_cast<T*>(malloc(sizeof(T) * newalloc));

  // TODO: Assert if this is correct behavior for resize. I think this will
  // call a copy constructor for each element.
  for (size_type i = 0; i < _size; ++i) new (&p[i]) T(std::move(_elements[i]));

  free(_elements);

  _elements = p;

  _space = newalloc;
}

template <class T>
inline void vector<T>::resize(size_type newsize, const T& val) {
  reserve(newsize);

  for (int index = _size; index < newsize; ++index) _elements[index] = val;

  _size = newsize;
}

template <class T>
inline size_t vector<T>::size() const {
  return _size;
}

// Modifiers
template <class T>
inline void vector<T>::push_back(const T& d) {
  ReserveMoreIfNeeded();
  new (&_elements[_size]) T(d);
  ++_size;
}

template <class T>
inline void vector<T>::push_back(T&& d) {
  ReserveMoreIfNeeded();
  new (&_elements[_size]) T(std::move(d));
  ++_size;
}

// Accessors
template <class T>
inline T& vector<T>::at(size_type n) {
  if (n < 0 || _size <= n) __throw_out_of_range();
  return _elements[n];
}

template <class T>
inline const T& vector<T>::at(size_type n) const {
  if (n < 0 || _size <= n) __throw_out_of_range();
  return _elements[n];
}

template <class T>
inline T& vector<T>::operator[](size_type i) {
  return _elements[i];
}

template <class T>
inline const T& vector<T>::operator[](size_type i) const {
  return _elements[i];
}

template <class T>
inline T& vector<T>::front() {
  return _elements[0];
}

template <class T>
inline const T& vector<T>::front() const {
  return _elements[0];
}

template <class T>
inline T& vector<T>::back() {
  return _elements[_size - 1];
}

template <class T>
inline const T& vector<T>::back() const {
  return _elements[_size - 1];
}

template <class T>
inline T* vector<T>::data() {
  return _elements;
}

template <class T>
inline const T* vector<T>::data() const {
  return _elements;
}

}  // namespace std
