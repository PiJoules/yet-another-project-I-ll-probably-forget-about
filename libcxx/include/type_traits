#ifndef LIBCXX_INCLUDE_TYPE_TRAITS
#define LIBCXX_INCLUDE_TYPE_TRAITS

namespace std {

template <bool B, class T = void>
struct enable_if {};

template <class T>
struct enable_if<true, T> {
  typedef T type;
};

template <bool B, class T = void>
using enable_if_t = typename enable_if<B, T>::type;

template <class T>
struct remove_reference {
  typedef T type;
};
template <class T>
struct remove_reference<T&> {
  typedef T type;
};
template <class T>
struct remove_reference<T&&> {
  typedef T type;
};

template <class T, T v>
struct integral_constant {
  static constexpr T value = v;
  using value_type = T;
  using type = integral_constant;  // using injected-class-name
  constexpr operator value_type() const noexcept { return value; }
  constexpr value_type operator()() const noexcept {
    return value;
  }  // since c++14
};

using true_type = integral_constant<bool, true>;
using false_type = integral_constant<bool, false>;

template <class _Tp>
struct remove_const {
  typedef _Tp type;
};
template <class _Tp>
struct remove_const<const _Tp> {
  typedef _Tp type;
};
template <class _Tp>
using remove_const_t = typename remove_const<_Tp>::type;

template <class _Tp>
struct remove_volatile {
  typedef _Tp type;
};
template <class _Tp>
struct remove_volatile<volatile _Tp> {
  typedef _Tp type;
};

template <class _Tp>
struct remove_cv {
  typedef typename remove_volatile<typename remove_const<_Tp>::type>::type type;
};
template <class _Tp>
using remove_cv_t = typename remove_cv<_Tp>::type;

template <class _Tp>
struct __libcpp_union : public false_type {};
template <class _Tp>
struct is_union : public __libcpp_union<typename remove_cv<_Tp>::type> {};

namespace detail {
template <class T>
std::integral_constant<bool, !std::is_union<T>::value> test(int T::*);

template <class>
std::false_type test(...);
}  // namespace detail

template <class T>
struct is_class : decltype(detail::test<T>(nullptr)) {};

namespace details {
template <typename B>
std::true_type test_pre_ptr_convertible(const volatile B*);
template <typename>
std::false_type test_pre_ptr_convertible(const volatile void*);

template <typename, typename>
auto test_pre_is_base_of(...) -> std::true_type;
template <typename B, typename D>
auto test_pre_is_base_of(int)
    -> decltype(test_pre_ptr_convertible<B>(static_cast<D*>(nullptr)));
}  // namespace details

template <typename Base, typename Derived>
struct is_base_of
    : std::integral_constant<
          bool,
          std::is_class<Base>::value &&
              std::is_class<Derived>::
                  value&& decltype(details::test_pre_is_base_of<Base, Derived>(
                      0))::value> {};

template <class Base, class Derived>
inline constexpr bool is_base_of_v = is_base_of<Base, Derived>::value;

template <class T>
struct is_lvalue_reference : std::false_type {};
template <class T>
struct is_lvalue_reference<T&> : std::true_type {};

template <class T>
struct is_const : std::false_type {};
template <class T>
struct is_const<const T> : std::true_type {};

template <class T>
inline constexpr bool is_const_v = is_const<T>::value;

template <class T>
struct is_pointer : std::false_type {};

template <class T>
struct is_pointer<T*> : std::true_type {};

template <class T>
struct is_pointer<T* const> : std::true_type {};

template <class T>
struct is_pointer<T* volatile> : std::true_type {};

template <class T>
struct is_pointer<T* const volatile> : std::true_type {};

template <class T>
inline constexpr bool is_pointer_v = is_pointer<T>::value;

template <class T>
struct remove_pointer {
  typedef T type;
};
template <class T>
struct remove_pointer<T*> {
  typedef T type;
};
template <class T>
struct remove_pointer<T* const> {
  typedef T type;
};
template <class T>
struct remove_pointer<T* volatile> {
  typedef T type;
};
template <class T>
struct remove_pointer<T* const volatile> {
  typedef T type;
};

template <class T>
using remove_pointer_t = typename remove_pointer<T>::type;

namespace detail {

template <class T>
struct type_identity {
  using type = T;
};  // or use std::type_identity (since C++20)

template <class T>  // Note that `cv void&` is a substitution failure
auto try_add_lvalue_reference(int) -> type_identity<T&>;
template <class T>  // Handle T = cv void case
auto try_add_lvalue_reference(...) -> type_identity<T>;

template <class T>
auto try_add_rvalue_reference(int) -> type_identity<T&&>;
template <class T>
auto try_add_rvalue_reference(...) -> type_identity<T>;

}  // namespace detail

template <class T>
struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {
};

template <class T>
struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {
};

template <typename T>
constexpr bool always_false = false;

template <typename T>
typename std::add_rvalue_reference<T>::type declval() noexcept {
  static_assert(always_false<T>, "declval not allowed in an evaluated context");
}

namespace detail {

template <class T>
auto test_returnable(int)
    -> decltype(void(static_cast<T (*)()>(nullptr)), std::true_type{});
template <class>
auto test_returnable(...) -> std::false_type;

template <class From, class To>
auto test_implicitly_convertible(int)
    -> decltype(void(std::declval<void (&)(To)>()(std::declval<From>())),
                std::true_type{});
template <class, class>
auto test_implicitly_convertible(...) -> std::false_type;

}  // namespace detail

template <class T, class U>
struct is_same : std::false_type {};

template <class T>
struct is_same<T, T> : std::true_type {};

template <class T>
struct is_void : std::is_same<void, typename std::remove_cv<T>::type> {};

template <class From, class To>
struct is_convertible
    : std::integral_constant<
          bool,
          (decltype(detail::test_returnable<To>(0))::value &&
           decltype(detail::test_implicitly_convertible<From, To>(0))::value) ||
              (std::is_void<From>::value && std::is_void<To>::value)> {};

}  // namespace std

#endif  // LIBCXX_INCLUDE_TYPE_TRAITS
